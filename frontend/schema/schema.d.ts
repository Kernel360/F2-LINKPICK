/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/login/kakao": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 카카오 소셜 로그인 */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 구글 소셜 로그인 */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 로그아웃
         * @description techPickLogin, access_token 쿠키를 삭제합니다.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/extension/picks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * [익스텐션 v1] 픽 생성
         * @description 	익스텐션에서 픽 생성합니다.
         *     	익스텐션 메이저 버전을 명시합니다. (ex. /v1, /v2, /v3)
         *     	또한, 픽 생성 이벤트가 랭킹 서버에 집계됩니다.
         *
         */
        post: operations["savePickFromExtension"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자 태그 조회
         * @description 사용자가 등록한 전체 태그를 조회합니다.
         */
        get: operations["getAllUserTag"];
        put?: never;
        /**
         * 태그 추가
         * @description 새로운 태그를 추가합니다.
         */
        post: operations["createTag"];
        /**
         * 태그 삭제
         * @description 사용자가 등록한 태그를 삭제합니다.
         */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        /**
         * 태그 수정
         * @description 사용자가 등록한 태그를 수정합니다.
         */
        patch: operations["updateTag"];
        trace?: never;
    };
    "/api/shared": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 자신이 공유한 폴더 목록 조회
         * @description 자신이 공유한 폴더 목록을 조회합니다.
         */
        get: operations["getUserSharedFolderList"];
        put?: never;
        /**
         * 내 폴더를 공유 폴더로 등록
         * @description 폴더를 공유 폴더로 등록하며, 공유된 폴더는 부여된 UUID를 통해 접근할 수 있습니다.
         */
        post: operations["createSharedFolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 폴더 리스트 내 픽 리스트 조회
         * @description 해당 폴더 리스트 각각의 픽 리스트를 조회합니다.
         */
        get: operations["getFolderChildPickList"];
        put?: never;
        /**
         * 웹 사이트에서 픽 생성
         * @description 웹 사이트에서 픽을 생성합니다. 또한, 픽 생성 이벤트가 랭킹 서버에 집계 됩니다.
         */
        post: operations["savePick"];
        /**
         * 픽 삭제
         * @description 휴지통에 있는 픽만 삭제 가능합니다.
         */
        delete: operations["deletePick"];
        options?: never;
        head?: never;
        /**
         * 웹 사이트에서 픽 내용만 수정 (폴더 이동 X)
         * @description 픽 내용 수정 및 폴더 이동까지 지원합니다.
         */
        patch: operations["updatePick"];
        trace?: never;
    };
    "/api/picks/extension": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * [익스텐션 전용] 미분류 폴더로 픽 생성
         * @description 익스텐션에서 미분류로 바로 픽 생성합니다. 또한, 픽 생성 이벤트가 랭킹 서버에 집계됩니다.
         */
        post: operations["savePickAsUnclassified"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * [익스텐션 전용] 픽 수정
         * @description 픽 내용 수정 및 폴더 이동까지 지원합니다.
         */
        patch: operations["updatePickFromChromeExtension"];
        trace?: never;
    };
    "/api/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 루트 폴더와 하위 리스트 조회
         * @description 사용자의 루트 폴더와 루트 하위 전체 폴더를 조회합니다.
         */
        get: operations["getAllRootFolderList"];
        put?: never;
        /**
         * 폴더 추가
         * @description 새로운 폴더를 추가합니다.
         */
        post: operations["createFolder"];
        /**
         * 폴더 삭제
         * @description 사용자가 등록한 폴더를 삭제합니다.
         */
        delete: operations["deleteFolder"];
        options?: never;
        head?: never;
        /**
         * 폴더 수정
         * @description 사용자가 등록한 폴더를 수정합니다.
         */
        patch: operations["updateFolder"];
        trace?: never;
    };
    "/api/events/suggestion/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 추천 페이지 링크 조회 이벤트 수집
         * @description [인증 불필요] 서버에게 추천 페이지의 어떤 링크가 조회됬는지 알립니다.
         */
        post: operations["suggestionView"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/shared/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 공개 폴더의 북마크 조회 이벤트 수집
         * @description [인증 불필요] 서버에게 공개 폴더의 어떤 북마크가 조회됬는지 알립니다.
         */
        post: operations["sharedFolderLinkView"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/picks/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 사용자 자신의 픽 조회 이벤트 수집
         * @description [로그인 필요] 서버에게 사용자 자신의 북마크 조회를 알립니다.
         */
        post: operations["bookmarkView"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 태그 이동
         * @description 사용자가 등록한 태그의 순서를 변경합니다.
         */
        patch: operations["moveTag"];
        trace?: never;
    };
    "/api/picks/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 픽 이동
         * @description 픽을 같은 폴더 혹은 다른 폴더로 이동합니다.
         */
        patch: operations["movePick"];
        trace?: never;
    };
    "/api/folders/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 폴더 이동
         * @description 사용자가 등록한 폴더를 이동합니다.
         */
        patch: operations["moveFolder"];
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 로그인 회원의 정보 획득
         * @description 회원 식별자(ID_TOKEN) 및 이메일 등의 비민감성 정보를 획득합니다.
         */
        get: operations["getUserInfo"];
        put?: never;
        post?: never;
        /**
         * 회원 탈퇴
         * @description 회원 탈퇴를 하면 모든 폴더, 픽, 태그가 삭제됩니다.
         */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suggestion/ranking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 인기 픽 Top 10
         * @description 	각 주제 별로 인기 조회수 글을 10개씩 획득 합니다.
         *     	1. 오늘 하루에 대한 실시간 링크 조회수 랭킹
         *     	2. 지난 7일 동안 링크 조회수 랭킹
         *     	3. 지난 한달간 픽된 (=북마크된) 링크 랭킹
         *
         */
        get: operations["getSuggestionByViewCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suggestion/blog-articles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 최근 유명 블로그 게시글 획득 (15개)
         * @description 최근 유명 블로그 게시글 리스트 15개를 획득합니다.
         */
        get: operations["getRecentBlogArticles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shared/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 공유 폴더 조회
         * @description UUID를 통해 공유된 폴더에 접근할 수 있습니다.
         */
        get: operations["getSharedFolderWithFullInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 픽 리스트 검색(페이지네이션)
         * @description 페이지네이션 처리 된 픽 리스트 검색
         */
        get: operations["searchPickPagination"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks/pagination": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 폴더 내 픽 페이지네이션 리스트 조회
         * @description 	해당 폴더의 픽 리스트를 조회합니다.
         *     	커서 기반 페이지네이션 처리된 리스트가 반환됩니다.
         *
         */
        get: operations["getFolderChildPickPagination"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 링크 픽 여부 조회
         * @description 	해당 링크를 픽한 적이 있는지 확인합니다.
         *     	boolean 값을 반환합니다.
         *     	true : 존재, false : 존재하지 않음.
         *
         */
        get: operations["existPick"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mobile/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 미분류, 휴지통 폴더와 루트 하위 폴더 조회
         * @description 	폴더 depth가 1인 경우만 조회합니다.
         *     	사용자의 미분류, 휴지통 폴더와 루트 하위 전체 폴더를 조회합니다.
         *     	루트 폴더는 조회하지 않습니다.
         *
         */
        get: operations["getMobileFolderList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 링크 정보 조회
         * @description 해당 링크의 데이터를 DB에서 가져옵니다. 해당 메서드에서 더 이상 스크래핑하지 않습니다.
         */
        get: operations["getLinkData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/folders/basic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 기본 폴더 리스트 조회
         * @description 사용자의 루트, 미분류, 휴지통 폴더를 조회합니다.
         */
        get: operations["getBasicFolderList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shared/{sourceFolderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 폴더 공유 취소
         * @description 공유된 폴더를 비공개로 변경 합니다.
         */
        delete: operations["deleteSharedFolder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks/recycle-bin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 휴지통 비우기
         * @description 휴지통에 있는 픽 리스트들을 모두 삭제합니다.
         */
        delete: operations["deleteAllPickFromRecycleBin"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "baguni.api.application.extension.dto.ExtensionApiRequest$Create": {
            /** @example GitHub Actions를 이용한 코드 리뷰 문화 개선기 */
            title: string;
            /** @example [
             *       4,
             *       5,
             *       2,
             *       1,
             *       3
             *     ] */
            tagIdOrderedList?: number[];
            /**
             * Format: int64
             * @example 1
             */
            parentFolderId: number;
            /** @example https://d2.naver.com/helloworld/8149881 */
            url: string;
            /** @example GitHub Actions를 이용한 코드 리뷰 문화 개선기 */
            linkTitle: string;
        };
        "baguni.api.application.extension.dto.ExtensionApiResponse$Pick": {
            /** Format: int64 */
            id?: number;
            title?: string;
            /** Format: int64 */
            parentFolderId?: number;
            tagIdOrderedList?: number[];
            url?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        "baguni.api.application.tag.dto.TagApiRequest$Create": {
            /** @example SpringBoot */
            name: string;
            /**
             * Format: int32
             * @example 12
             */
            colorNumber: number;
        };
        "baguni.api.application.tag.dto.TagApiResponse$Create": {
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: int32 */
            colorNumber?: number;
        };
        "baguni.api.application.sharedFolder.dto.SharedFolderApiResponse$Create": {
            /**
             * @description {shared.folderAccessToken.description}
             * @example 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d
             */
            folderAccessToken: string;
        };
        "baguni.api.application.pick.dto.PickApiRequest$Create": {
            /** @example Record란? */
            title?: string;
            /** @example [
             *       4,
             *       5,
             *       2,
             *       1,
             *       3
             *     ] */
            tagIdOrderedList?: number[];
            /**
             * Format: int64
             * @example 1
             */
            parentFolderId?: number;
            linkInfo?: components["schemas"]["baguni.domain.infrastructure.link.dto.LinkInfo"];
        };
        "baguni.domain.infrastructure.link.dto.LinkInfo": {
            /** @example https://velog.io/@hyeok_1212/Java-Record-%EC%82%AC%EC%9A%A9%ED%95%98%EC%8B%9C%EB%82%98%EC%9A%94 */
            url: string;
            /** @example [Java] Record 사용하시나요? */
            title?: string;
            /** @example IntelliJ : 레코드 써봐 */
            description?: string;
            /** @example https://velog.velcdn.com/images/hyeok_1212/post/5ea148fb-1490-4b03-811e-222b4d26b65e/image.png */
            imageUrl?: string;
        };
        "baguni.api.application.pick.dto.PickApiResponse$Pick": {
            /** Format: int64 */
            id?: number;
            title?: string;
            linkInfo?: components["schemas"]["baguni.domain.infrastructure.link.dto.LinkInfo"];
            /** Format: int64 */
            parentFolderId?: number;
            tagIdOrderedList?: number[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        "baguni.api.application.pick.dto.PickApiRequest$CreateFromExtension": {
            /** @example https://d2.naver.com/helloworld/8149881 */
            url?: string;
            /** @example GitHub Actions를 이용한 코드 리뷰 문화 개선기 */
            title?: string;
        };
        "baguni.api.application.pick.dto.PickApiResponse$Extension": {
            /** Format: int64 */
            id?: number;
            title?: string;
            /** Format: int64 */
            parentFolderId?: number;
            tagIdOrderedList?: number[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        "baguni.api.application.folder.dto.FolderApiRequest$Create": {
            /** @example backend */
            name: string;
            /**
             * Format: int64
             * @example 3
             */
            parentFolderId: number;
        };
        "baguni.api.application.folder.dto.FolderApiResponse": {
            /** Format: int64 */
            id?: number;
            name?: string;
            /**
             * @example GENERAL
             * @enum {string}
             */
            folderType?: "UNCLASSIFIED" | "RECYCLE_BIN" | "ROOT" | "GENERAL";
            /** Format: int64 */
            parentFolderId?: number;
            childFolderIdOrderedList?: number[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** @description     비공개 폴더일 경우 null을 반환.
             *         공유된 폴더일 경우 조회용 UUID 토큰을 반환.
             *      */
            folderAccessToken?: string | null;
        };
        "baguni.api.application.event.dto.EventApiRequest$SuggestionView": {
            /** @description 조회된 링크 url */
            url: string;
        };
        "baguni.api.application.event.dto.EventApiRequest$SharedBookmarkView": {
            /** @description 조회된 링크 url */
            url: string;
            /** @description 조회된 공개 폴더 접근용 토큰 */
            folderAccessToken: string;
        };
        "baguni.api.application.event.dto.EventApiRequest$BookmarkView": {
            /** @description 조회된 링크 url */
            url: string;
            /**
             * Format: int64
             * @description 조회되는 픽의 id
             */
            pickId: number;
        };
        "baguni.api.application.tag.dto.TagApiRequest$Update": {
            /**
             * Format: int64
             * @example 2
             */
            id: number;
            /** @example new tag name */
            name: string;
            /**
             * Format: int32
             * @example 7
             */
            colorNumber: number;
        };
        "baguni.api.application.tag.dto.TagApiRequest$Move": {
            /**
             * Format: int64
             * @example 3
             */
            id: number;
            /**
             * Format: int32
             * @example 1
             */
            orderIdx?: number;
        };
        "baguni.api.application.pick.dto.PickApiRequest$Update": {
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /** @example Record란 뭘까? */
            title?: string;
            /** @example [
             *       4,
             *       5,
             *       2,
             *       1
             *     ] */
            tagIdOrderedList?: number[];
        };
        "baguni.api.application.pick.dto.PickApiRequest$Move": {
            /** @example [
             *       1,
             *       2
             *     ] */
            idList: number[];
            /**
             * Format: int64
             * @example 3
             */
            destinationFolderId: number;
            /**
             * Format: int32
             * @example 0
             */
            orderIdx?: number;
        };
        "baguni.api.application.pick.dto.PickApiRequest$UpdateFromExtension": {
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /** @example Record란 뭘까? */
            title?: string;
            /**
             * Format: int64
             * @example 3
             */
            parentFolderId?: number;
            /** @example [
             *       4,
             *       5,
             *       2,
             *       1
             *     ] */
            tagIdOrderedList?: number[];
        };
        "baguni.api.application.folder.dto.FolderApiRequest$Update": {
            /**
             * Format: int64
             * @example 3
             */
            id: number;
            /** @example SpringBoot */
            name: string;
        };
        "baguni.api.application.folder.dto.FolderApiRequest$Move": {
            /** @example [
             *       12,
             *       11,
             *       4,
             *       5,
             *       1,
             *       6
             *     ] */
            idList: number[];
            /**
             * Format: int64
             * @example 7
             */
            parentFolderId: number;
            /**
             * Format: int64
             * @example 3
             */
            destinationFolderId: number;
            /**
             * Format: int32
             * @example 2
             */
            orderIdx?: number;
        };
        "baguni.api.application.user.controller.dto.UserInfoApiResponse": {
            /** @description 사용자 식별 토큰 */
            idToken: string;
            /** @description 사용자 이메일 */
            email: string;
            /** @description 사용자 이름 */
            name?: string;
        };
        "baguni.api.application.tag.dto.TagApiResponse$Read": {
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: int32 */
            colorNumber?: number;
        };
        /** @description 지난 30일동안 링크가 픽된 횟수 Top 10 */
        "baguni.api.application.suggestion.dto.LinkInfoWithCount": {
            url: string;
            title?: string;
            description?: string;
            imageUrl?: string;
            /** Format: int64 */
            count?: number;
        };
        "baguni.api.application.suggestion.dto.RankingResponse": {
            /** @description 오늘 하루 동안 인기 있는 링크 Top 10 */
            dailyViewRanking?: components["schemas"]["baguni.api.application.suggestion.dto.LinkInfoWithCount"][];
            /** @description 지난 7일동안 링크 조회 수 Top 10 */
            weeklyViewRanking?: components["schemas"]["baguni.api.application.suggestion.dto.LinkInfoWithCount"][];
            /** @description 지난 30일동안 링크가 픽된 횟수 Top 10 */
            monthlyPickRanking?: components["schemas"]["baguni.api.application.suggestion.dto.LinkInfoWithCount"][];
        };
        "baguni.domain.infrastructure.link.dto.RssLinkInfo": {
            /** @example https://velog.io/@hyeok_1212/Java-Record-%EC%82%AC%EC%9A%A9%ED%95%98%EC%8B%9C%EB%82%98%EC%9A%94 */
            url: string;
            /** @example [Java] Record 사용하시나요? */
            title?: string;
            /** @example IntelliJ : 레코드 써봐 */
            description?: string;
            /** @example https://velog.velcdn.com/images/hyeok_1212/post/5ea148fb-1490-4b03-811e-222b4d26b65e/image.png */
            imageUrl?: string;
            /** Format: date-time */
            publishedAt?: string;
        };
        "baguni.api.application.sharedFolder.dto.SharedFolderApiResponse$ReadFolderPartial": {
            /**
             * Format: int64
             * @description 원본 폴더의 이름
             */
            sourceFolderId: number;
            /**
             * @description 원본 폴더의 이름
             * @example 리액트 모음집
             */
            sourceFolderName: string;
            /**
             * Format: date-time
             * @description 원본 폴더의 생성 시점
             * @example 2024-11-29T06:03:49.182Z
             */
            sourceFolderCreatedAt: string;
            /**
             * Format: date-time
             * @description 원본 폴더의 마지막 업데이트 시점
             * @example 2024-11-29T06:03:49.182Z
             */
            sourceFolderUpdatedAt: string;
            /**
             * @description {shared.folderAccessToken.description}
             * @example 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d
             */
            folderAccessToken: string;
        };
        "baguni.api.application.sharedFolder.dto.SharedFolderApiResponse$ReadFolderFull": {
            /**
             * @description 원본 폴더의 이름
             * @example 리액트 모음집
             */
            folderName: string;
            /**
             * Format: date-time
             * @description 원본 폴더의 생성 시점
             * @example 2024-11-29T06:03:49.182Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 원본 폴더의 마지막 업데이트 시점
             * @example 2024-11-29T06:03:49.182Z
             */
            updatedAt: string;
            /** @description 폴더 내 pick 리스트 */
            pickList: components["schemas"]["baguni.domain.infrastructure.sharedFolder.dto.SharedFolderResult$SharedPickInfo"][];
            /**
             * @description 해당 폴더 내에서 사용된 모든 태그 정보가 담길 배열. tagList.get(idx) 로 태그 정보를 획득할 수 있습니다.
             * @example [
             *       {
             *         "name": "리액트",
             *         "colorNumber": "2"
             *       },
             *       {
             *         "name": "CSS",
             *         "colorNumber": "8"
             *       }
             *     ]
             */
            tagList: components["schemas"]["baguni.domain.infrastructure.sharedFolder.dto.SharedFolderResult$SharedTagInfo"][];
        };
        /** @description 폴더 내 pick 리스트 */
        "baguni.domain.infrastructure.sharedFolder.dto.SharedFolderResult$SharedPickInfo": {
            /** @example 자바 레코드 참고 블로그 1 */
            title: string;
            linkInfo: components["schemas"]["baguni.domain.infrastructure.link.dto.LinkInfo"];
            /**
             * @description tagList.get(idx) 로 태그 정보를 획득할 수 있습니다.
             * @example [
             *       0,
             *       5,
             *       2,
             *       3
             *     ]
             */
            tagIdxList: number[];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /**
         * @description 해당 폴더 내에서 사용된 모든 태그 정보가 담길 배열. tagList.get(idx) 로 태그 정보를 획득할 수 있습니다.
         * @example [
         *       {
         *         "name": "리액트",
         *         "colorNumber": "2"
         *       },
         *       {
         *         "name": "CSS",
         *         "colorNumber": "8"
         *       }
         *     ]
         */
        "baguni.domain.infrastructure.sharedFolder.dto.SharedFolderResult$SharedTagInfo": {
            name: string;
            /** Format: int32 */
            colorNumber: number;
        };
        "baguni.api.application.pick.dto.PickApiResponse$FolderPickList": {
            /** Format: int64 */
            folderId?: number;
            pickList?: components["schemas"]["baguni.api.application.pick.dto.PickApiResponse$Pick"][];
        };
        "baguni.api.application.pick.dto.PickSliceResponseBaguni.api.application.pick.dto.PickApiResponse$Pick": {
            content?: components["schemas"]["baguni.api.application.pick.dto.PickApiResponse$Pick"][];
            /** Format: int64 */
            lastCursor?: number;
            /** Format: int32 */
            size?: number;
            hasNext?: boolean;
        };
        "baguni.api.application.pick.dto.PickApiResponse$Exist": {
            exist: boolean;
        };
        "baguni.api.application.link.dto.LinkApiResponse": {
            url?: string;
            title?: string;
            description?: string;
            imageUrl?: string;
        };
        "baguni.api.application.tag.dto.TagApiRequest$Delete": {
            /**
             * Format: int64
             * @example 4
             */
            id: number;
        };
        "baguni.api.application.pick.dto.PickApiRequest$Delete": {
            /** @example [
             *       1
             *     ] */
            idList: number[];
        };
        "baguni.api.application.folder.dto.FolderApiRequest$Delete": {
            /** @example [
             *       12,
             *       11,
             *       4,
             *       5,
             *       1,
             *       6
             *     ] */
            idList: number[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    savePickFromExtension: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.extension.dto.ExtensionApiRequest$Create"];
            };
        };
        responses: {
            /** @description 픽 생성 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.extension.dto.ExtensionApiResponse$Pick"];
                };
            };
            /** @description 유저 또는 폴더가 존재하지 않습니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.extension.dto.ExtensionApiResponse$Pick"];
                };
            };
            /** @description 잘못된 접근 (폴더, 태그) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.extension.dto.ExtensionApiResponse$Pick"];
                };
            };
            /** @description 허용되지 않는 폴더 */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.extension.dto.ExtensionApiResponse$Pick"];
                };
            };
        };
    };
    getAllUserTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.tag.dto.TagApiResponse$Read"][];
                };
            };
        };
    };
    createTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.tag.dto.TagApiRequest$Create"];
            };
        };
        responses: {
            /** @description 태그 추가 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.tag.dto.TagApiResponse$Create"];
                };
            };
            /** @description 중복된 태그 이름 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.tag.dto.TagApiRequest$Delete"];
            };
        };
        responses: {
            /** @description 태그 삭제 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 태그만 삭제할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.tag.dto.TagApiRequest$Update"];
            };
        };
        responses: {
            /** @description 태그 수정 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 중복된 태그 이름 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 태그만 수정할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserSharedFolderList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 공유 폴더 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.sharedFolder.dto.SharedFolderApiResponse$ReadFolderPartial"][];
                };
            };
        };
    };
    createSharedFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number;
            };
        };
        responses: {
            /** @description 공유 폴더 생성 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.sharedFolder.dto.SharedFolderApiResponse$Create"];
                };
            };
            /** @description 자신의 폴더만 공유할 수 있습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.sharedFolder.dto.SharedFolderApiResponse$Create"];
                };
            };
        };
    };
    getFolderChildPickList: {
        parameters: {
            query?: {
                /**
                 * @description 조회할 폴더 ID 목록
                 * @example 1, 2, 3
                 */
                folderIdList?: number[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 픽 리스트 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.pick.dto.PickApiResponse$FolderPickList"][];
                };
            };
        };
    };
    savePick: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.pick.dto.PickApiRequest$Create"];
            };
        };
        responses: {
            /** @description 픽 생성 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
            /** @description 잘못된 태그 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
            /** @description 접근할 수 없는 폴더 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
        };
    };
    deletePick: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.pick.dto.PickApiRequest$Delete"];
            };
        };
        responses: {
            /** @description 픽 삭제 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 휴지통이 아닌 폴더에서 픽 삭제 불가 */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 미확인 서버 에러 혹은 존재하지 않는 픽 삭제 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updatePick: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.pick.dto.PickApiRequest$Update"];
            };
        };
        responses: {
            /** @description 픽 내용 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
        };
    };
    savePickAsUnclassified: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.pick.dto.PickApiRequest$CreateFromExtension"];
            };
        };
        responses: {
            /** @description 픽 생성 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.pick.dto.PickApiResponse$Extension"];
                };
            };
            /** @description OG 태그 업데이트를 위한 크롤링 요청 실패 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.pick.dto.PickApiResponse$Extension"];
                };
            };
        };
    };
    updatePickFromChromeExtension: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.pick.dto.PickApiRequest$UpdateFromExtension"];
            };
        };
        responses: {
            /** @description 픽 내용 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
        };
    };
    getAllRootFolderList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description 본인 폴더만 조회할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.folder.dto.FolderApiResponse"][];
                };
            };
        };
    };
    createFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.folder.dto.FolderApiRequest$Create"];
            };
        };
        responses: {
            /** @description 폴더 추가 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.folder.dto.FolderApiResponse"];
                };
            };
        };
    };
    deleteFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.folder.dto.FolderApiRequest$Delete"];
            };
        };
        responses: {
            /** @description 폴더 삭제 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 기본 폴더는 삭제할 수 없습니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 폴더만 삭제할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.folder.dto.FolderApiRequest$Update"];
            };
        };
        responses: {
            /** @description 폴더 수정 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 기본 폴더는 수정할 수 없습니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 폴더만 수정할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    suggestionView: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.event.dto.EventApiRequest$SuggestionView"];
            };
        };
        responses: {
            /** @description 전송 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sharedFolderLinkView: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.event.dto.EventApiRequest$SharedBookmarkView"];
            };
        };
        responses: {
            /** @description 전송 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bookmarkView: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.event.dto.EventApiRequest$BookmarkView"];
            };
        };
        responses: {
            /** @description 전송 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    moveTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.tag.dto.TagApiRequest$Move"];
            };
        };
        responses: {
            /** @description 태그 이동 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 태그만 이동할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    movePick: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.pick.dto.PickApiRequest$Move"];
            };
        };
        responses: {
            /** @description 픽 이동 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 폴더가 존재하지 않음. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    moveFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["baguni.api.application.folder.dto.FolderApiRequest$Move"];
            };
        };
        responses: {
            /** @description 폴더 이동 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 기본 폴더는 이동할 수 없습니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 폴더만 이동할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 미분류폴더, 휴지통 폴더로 이동할 수 없습니다. */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 회원 정보 획득 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.user.controller.dto.UserInfoApiResponse"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 회원 탈퇴 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSuggestionByViewCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.suggestion.dto.RankingResponse"];
                };
            };
        };
    };
    getRecentBlogArticles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.domain.infrastructure.link.dto.RssLinkInfo"][];
                };
            };
        };
    };
    getSharedFolderWithFullInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 공유 폴더 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.sharedFolder.dto.SharedFolderApiResponse$ReadFolderFull"];
                };
            };
            /** @description 올바르지 않은 UUID */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    searchPickPagination: {
        parameters: {
            query?: {
                /**
                 * @description 조회할 폴더 ID 목록
                 * @example 1, 2, 3
                 */
                folderIdList?: number[];
                /**
                 * @description 검색 토큰 목록
                 * @example 리액트, 쿼리, 서버
                 */
                searchTokenList?: string[];
                /**
                 * @description 검색 태그 ID 목록
                 * @example 1, 2, 3
                 */
                tagIdList?: number[];
                /**
                 * @description 	다음에 조회할 커서(cursor) 값입니다.
                 *     	처음 페이지를 조회할 때는 0을 넣어주세요.
                 *     	이후에는 응답으로 받은 lastCursor 값을 그대로 사용하시면 됩니다.
                 *     	예시: lastCursor = 1 → 다음 요청에 cursor=1을 넣으면, 1은 제외하고 2부터 조회합니다.
                 *
                 * @example 0
                 */
                cursor?: number;
                /**
                 * @description 한 페이지에 가져올 픽 개수
                 * @example 20
                 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.pick.dto.PickSliceResponseBaguni.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
        };
    };
    getFolderChildPickPagination: {
        parameters: {
            query: {
                /**
                 * @description 조회할 폴더 ID
                 * @example 1
                 */
                folderId: number;
                /**
                 * @description 	다음에 조회할 커서(cursor) 값입니다.
                 *     	처음 페이지를 조회할 때는 0을 넣어주세요.
                 *     	이후에는 응답으로 받은 lastCursor 값을 그대로 사용하시면 됩니다.
                 *     	예시: lastCursor = 1 → 다음 요청에 cursor=1을 넣으면, 1은 제외하고 2부터 조회합니다.
                 *
                 * @example 0
                 */
                cursor?: number;
                /**
                 * @description 한 페이지에 가져올 픽 개수
                 * @example 20
                 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 픽 리스트 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.pick.dto.PickSliceResponseBaguni.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
        };
    };
    existPick: {
        parameters: {
            query: {
                link: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 픽 여부 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.pick.dto.PickApiResponse$Exist"];
                };
            };
        };
    };
    getMobileFolderList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.folder.dto.FolderApiResponse"][];
                };
            };
            /** @description 본인 폴더만 조회할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.folder.dto.FolderApiResponse"][];
                };
            };
        };
    };
    getLinkData: {
        parameters: {
            query: {
                /** @description og 태그 데이터 가져올 url */
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.link.dto.LinkApiResponse"];
                };
            };
        };
    };
    getBasicFolderList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.folder.dto.FolderApiResponse"][];
                };
            };
            /** @description 본인 폴더만 조회할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["baguni.api.application.folder.dto.FolderApiResponse"][];
                };
            };
        };
    };
    deleteSharedFolder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sourceFolderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 폴더 비공개화 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 자신의 공유 폴더만 삭제 할 수 있습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteAllPickFromRecycleBin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 픽 삭제 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 휴지통이 아닌 폴더에서 픽 삭제 불가 */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 미확인 서버 에러 혹은 존재하지 않는 픽 삭제 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
